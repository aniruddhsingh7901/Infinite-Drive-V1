{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/services/crypto.ts"],"sourcesContent":["// // First, let's define our types at the top\n// type CryptoCurrency = 'BTC' | 'ETH' | 'LTC' | 'TRON' | 'MONERO';\n\n// export interface CryptoPayment {\n//   address: string;\n//   amount: number;\n//   currency: CryptoCurrency;\n//   orderId: string;\n//   status: 'pending' | 'completed' | 'failed';\n//   timeoutAt: number;\n// }\n\n// interface TransactionResult {\n//   success: boolean;\n//   transactionHash?: string;\n//   error?: string;\n// }\n\n// // Define our static data with proper typing\n// const CRYPTO_ADDRESSES: Record<CryptoCurrency, string> = {\n//   BTC: '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy',\n//   ETH: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n//   LTC: 'LbTjMGN7gELw4KbeyQf6cTCq5oxkhtHGKz',\n//   TRON: 'TN3W4H6rK2ce4vX9YnFQHwKENnHjoxb3m9',\n//   MONERO: '44AFFq5kSiGBoZ4NMDwYtN18obc8AemS33DBLWs3H7otXft3XjrpDtQGv7SqSsaBYBb98uNbr2VBBEt7f2wfn3RVGQBEP3A'\n// };\n\n// const MINIMUM_PAYMENTS: Record<CryptoCurrency, number> = {\n//   BTC: 0.0001,\n//   ETH: 0.01,\n//   LTC: 0.1,\n//   TRON: 100,\n//   MONERO: 0.1\n// };\n\n// // In-memory storage\n// const payments = new Map<string, CryptoPayment>();\n\n// function generateWalletAddress(currency: CryptoCurrency): string {\n//   return CRYPTO_ADDRESSES[currency];\n// }\n\n// export async function createCryptoPayment(currency: CryptoCurrency, amount: number): Promise<CryptoPayment> {\n//   const payment: CryptoPayment = {\n//     address: generateWalletAddress(currency),\n//     amount,\n//     currency,\n//     orderId: `ORD-${Date.now()}-${Math.random().toString(36).substring(7)}`,\n//     status: 'pending',\n//     timeoutAt: Date.now() + 30 * 60 * 1000\n//   };\n\n//   payments.set(payment.orderId, payment);\n//   startPaymentMonitoring(payment);\n\n//   return payment;\n// }\n\n// export async function checkPaymentStatus(orderId: string): Promise<'pending' | 'completed' | 'failed'> {\n//   const payment = payments.get(orderId);\n  \n//   if (!payment) {\n//     throw new Error('Payment not found');\n//   }\n\n//   if (Date.now() > payment.timeoutAt && payment.status === 'pending') {\n//     payment.status = 'failed';\n//     payments.set(orderId, payment);\n//   }\n\n//   return payment.status;\n// }\n\n// async function startPaymentMonitoring(payment: CryptoPayment): Promise<void> {\n//   const checkInterval = setInterval(async () => {\n//     try {\n//       const result = await checkBlockchain(payment);\n      \n//       if (result.success) {\n//         payment.status = 'completed';\n//         payments.set(payment.orderId, payment);\n//         clearInterval(checkInterval);\n//       }\n\n//       if (Date.now() > payment.timeoutAt) {\n//         payment.status = 'failed';\n//         payments.set(payment.orderId, payment);\n//         clearInterval(checkInterval);\n//       }\n//     } catch (error) {\n//       console.error('Payment monitoring error:', error);\n//     }\n//   }, 10000);\n// }\n\n// async function checkBlockchain(payment: CryptoPayment): Promise<TransactionResult> {\n//   if (Math.random() < 0.1) {\n//     return {\n//       success: true,\n//       transactionHash: `0x${Math.random().toString(36).substring(7)}`\n//     };\n//   }\n//   return { success: false };\n// }\n\n// export async function validateAddress(currency: CryptoCurrency, address: string): Promise<boolean> {\n//   return true;\n// }\n\n// export function getMinimumPayment(currency: CryptoCurrency): number {\n//   return MINIMUM_PAYMENTS[currency];\n// }\n\n// export function formatCryptoAmount(amount: number, currency: CryptoCurrency): string {\n//   return `${amount.toFixed(8)} ${currency}`;\n// }\n\n// // Export types for use in other files\n// export type { CryptoCurrency };\nexport interface CryptoPayment {\n  orderId: string;\n  currency: string;\n  address: string;\n  amount: number;\n  status: 'pending' | 'completed' | 'failed';\n  timeoutAt: number;\n}\ninterface PaymentStatusResponse {\n\n  status: 'pending' | 'confirming' | 'completed';\n\n  txHash: string;\n\n  downloadLink: string;\n\n}\n\n\nexport async function checkPaymentStatus(orderId: string): Promise<PaymentStatusResponse>{\n  const response = await fetch(`http://localhost:5000/payment/check/${orderId}`);\n  const data = await response.json();\n  console.log(\"ðŸš€ ~ checkPaymentStatus ~ data:\", data)\n  return data.status;\n}"],"names":[],"mappings":"AAAA,8CAA8C;AAC9C,mEAAmE;AAEnE,mCAAmC;AACnC,qBAAqB;AACrB,oBAAoB;AACpB,8BAA8B;AAC9B,qBAAqB;AACrB,gDAAgD;AAChD,uBAAuB;AACvB,IAAI;AAEJ,gCAAgC;AAChC,sBAAsB;AACtB,8BAA8B;AAC9B,oBAAoB;AACpB,IAAI;AAEJ,+CAA+C;AAC/C,6DAA6D;AAC7D,+CAA+C;AAC/C,uDAAuD;AACvD,+CAA+C;AAC/C,gDAAgD;AAChD,8GAA8G;AAC9G,KAAK;AAEL,6DAA6D;AAC7D,iBAAiB;AACjB,eAAe;AACf,cAAc;AACd,eAAe;AACf,gBAAgB;AAChB,KAAK;AAEL,uBAAuB;AACvB,qDAAqD;AAErD,qEAAqE;AACrE,uCAAuC;AACvC,IAAI;AAEJ,gHAAgH;AAChH,qCAAqC;AACrC,gDAAgD;AAChD,cAAc;AACd,gBAAgB;AAChB,+EAA+E;AAC/E,yBAAyB;AACzB,6CAA6C;AAC7C,OAAO;AAEP,4CAA4C;AAC5C,qCAAqC;AAErC,oBAAoB;AACpB,IAAI;AAEJ,2GAA2G;AAC3G,2CAA2C;AAE3C,oBAAoB;AACpB,4CAA4C;AAC5C,MAAM;AAEN,0EAA0E;AAC1E,iCAAiC;AACjC,sCAAsC;AACtC,MAAM;AAEN,2BAA2B;AAC3B,IAAI;AAEJ,iFAAiF;AACjF,oDAAoD;AACpD,YAAY;AACZ,uDAAuD;AAEvD,8BAA8B;AAC9B,wCAAwC;AACxC,kDAAkD;AAClD,wCAAwC;AACxC,UAAU;AAEV,8CAA8C;AAC9C,qCAAqC;AACrC,kDAAkD;AAClD,wCAAwC;AACxC,UAAU;AACV,wBAAwB;AACxB,2DAA2D;AAC3D,QAAQ;AACR,eAAe;AACf,IAAI;AAEJ,uFAAuF;AACvF,+BAA+B;AAC/B,eAAe;AACf,uBAAuB;AACvB,wEAAwE;AACxE,SAAS;AACT,MAAM;AACN,+BAA+B;AAC/B,IAAI;AAEJ,uGAAuG;AACvG,iBAAiB;AACjB,IAAI;AAEJ,wEAAwE;AACxE,uCAAuC;AACvC,IAAI;AAEJ,yFAAyF;AACzF,+CAA+C;AAC/C,IAAI;AAEJ,yCAAyC;AACzC,kCAAkC;;;;AAoB3B,eAAe,mBAAmB,OAAe;IACtD,MAAM,WAAW,MAAM,MAAM,CAAC,oCAAoC,EAAE,SAAS;IAC7E,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,QAAQ,GAAG,CAAC,mCAAmC;IAC/C,OAAO,KAAK,MAAM;AACpB"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/components/PaymentMonitor.tsx"],"sourcesContent":["// // src/components/PaymentMonitor.tsx\n// 'use client';\n\n// import { useState, useEffect } from 'react';\n// import { CryptoPayment, checkPaymentStatus, formatCryptoAmount } from '@/services/crypto'\n\n// interface PaymentMonitorProps {\n//   payment: CryptoPayment;\n//   onSuccess: () => void;\n//   onFailure: () => void;\n// }\n\n// export default function PaymentMonitor({ payment, onSuccess, onFailure }: PaymentMonitorProps) {\n//   const [timeLeft, setTimeLeft] = useState<number>(\n//     Math.max(0, payment.timeoutAt - Date.now())\n//   );\n\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       const newTimeLeft = Math.max(0, payment.timeoutAt - Date.now());\n//       setTimeLeft(newTimeLeft);\n      \n//       if (newTimeLeft === 0) {\n//         onFailure();\n//         clearInterval(timer);\n//       }\n//     }, 1000);\n\n//     const statusChecker = setInterval(async () => {\n//       try {\n//         const status = await checkPaymentStatus(payment.orderId);\n//         if (status === 'completed') {\n//           onSuccess();\n//           clearInterval(statusChecker);\n//           clearInterval(timer);\n//         } else if (status === 'failed') {\n//           onFailure();\n//           clearInterval(statusChecker);\n//           clearInterval(timer);\n//         }\n//       } catch (error) {\n//         console.error('Error checking payment status:', error);\n//       }\n//     }, 5000);\n\n//     return () => {\n//       clearInterval(timer);\n//       clearInterval(statusChecker);\n//     };\n//   }, [payment, onSuccess, onFailure]);\n\n//   const minutes = Math.floor(timeLeft / 60000);\n//   const seconds = Math.floor((timeLeft % 60000) / 1000);\n\n//   return (\n//     <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n//       <h3 className=\"text-xl font-bold mb-4\">Payment Details</h3>\n      \n//       <div className=\"space-y-4\">\n//         <div>\n//           <label className=\"block text-sm text-gray-600\">Send exactly:</label>\n//           <p className=\"text-2xl font-bold\">{payment.amount} {payment.currency}</p>\n//         </div>\n\n//         <div>\n//           <label className=\"block text-sm text-gray-600\">To address:</label>\n//           <div className=\"flex items-center gap-2\">\n//             <input\n//               type=\"text\"\n//               value={payment.address}\n//               readOnly\n//               className=\"w-full p-2 bg-gray-50 rounded border\"\n//             />\n//             <button\n//               onClick={() => navigator.clipboard.writeText(payment.address)}\n//               className=\"p-2 text-blue-600 hover:text-blue-700\"\n//             >\n//               Copy\n//             </button>\n//           </div>\n//         </div>\n\n//         <div>\n//           <label className=\"block text-sm text-gray-600\">Time remaining:</label>\n//           <p className=\"text-xl\">\n//             {minutes}:{seconds.toString().padStart(2, '0')}\n//           </p>\n//         </div>\n\n//         <div className=\"mt-4 pt-4 border-t\">\n//           <div className=\"flex items-center gap-2\">\n//             <div className={`w-3 h-3 rounded-full ${\n//               payment.status === 'pending' ? 'bg-yellow-500' :\n//               payment.status === 'completed' ? 'bg-green-500' :\n//               'bg-red-500'\n//             }`} />\n//             <span className=\"capitalize\">{payment.status}</span>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// 'use client';\n\n// import { useState, useEffect } from 'react';\n// import { CryptoPayment, checkPaymentStatus } from '@/services/crypto';\n\n// interface PaymentMonitorProps {\n//   payment: CryptoPayment;\n//   onSuccess: () => void;\n//   onFailure: () => void;\n// }\n\n// export default function PaymentMonitor({ payment, onSuccess, onFailure }: PaymentMonitorProps) {\n//   const [timeLeft, setTimeLeft] = useState<number>(\n//     Math.max(0, payment.timeoutAt - Date.now())\n//   );\n//   const [status, setStatus] = useState<'pending' | 'confirming' | 'completed'>('pending');\n//   const [confirmations, setConfirmations] = useState(0);\n\n//   useEffect(() => {\n//     // Countdown timer\n//     const timer = setInterval(() => {\n//       const newTimeLeft = Math.max(0, payment.timeoutAt - Date.now());\n//       setTimeLeft(newTimeLeft);\n      \n//       if (newTimeLeft === 0) {\n//         onFailure();\n//         clearInterval(timer);\n//       }\n//     }, 1000);\n\n//     // Payment status checker\n//     const statusChecker = setInterval(async () => {\n//       try {\n//         const paymentStatus = await checkPaymentStatus(payment.orderId);\n//         console.log(\"ðŸš€ ~ statusChecker ~ paymentStatus:\", paymentStatus)\n        \n//         if (paymentStatus === 'completed') {\n//           setStatus('completed');\n//           clearInterval(statusChecker);\n//           clearInterval(timer);\n//           onSuccess();\n//         } else if (paymentStatus === 'confirming') {\n//           setStatus('confirming');\n//           setConfirmations(prev => prev + 1);\n//         }\n//       } catch (error) {\n//         console.error('Payment check failed:', error);\n//       }\n//     }, 5000); // Check every 5 seconds\n\n//     return () => {\n//       clearInterval(timer);\n//       clearInterval(statusChecker);\n//     };\n//   }, [payment.orderId, payment.timeoutAt, onSuccess, onFailure]);\n\n//   const minutes = Math.floor(timeLeft / 60000);\n//   const seconds = Math.floor((timeLeft % 60000) / 1000);\n\n//   return (\n//     <div className=\"space-y-4\">\n//       <div>\n//         <label className=\"block text-sm text-gray-600 mb-1\">Time Remaining:</label>\n//         <div className=\"text-2xl font-mono\">\n//           {minutes}:{seconds.toString().padStart(2, '0')}\n//         </div>\n//       </div>\n\n//       <div className=\"flex items-center gap-2\">\n//         <div className={`w-3 h-3 rounded-full ${\n//           status === 'completed' ? 'bg-green-500' :\n//           status === 'confirming' ? 'bg-blue-500 animate-pulse' :\n//           'bg-yellow-500 animate-pulse'\n//         }`} />\n//         <span className=\"font-medium\">\n//           {status === 'completed' ? 'Payment Confirmed!' :\n//            status === 'confirming' ? `Confirming (${confirmations} confirmations)` :\n//            'Awaiting Payment...'}\n//         </span>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { CryptoPayment, checkPaymentStatus } from '@/services/crypto';\n\ninterface PaymentMonitorProps {\n  payment: CryptoPayment;\n  onSuccess: (txHash: string, downloadLink: string) => void;\n  onFailure: () => void;\n}\n\nexport default function PaymentMonitor({ payment, onSuccess, onFailure }: PaymentMonitorProps) {\n  const [timeLeft, setTimeLeft] = useState<number>(\n    Math.max(0, payment.timeoutAt - Date.now())\n  );\n  const [status, setStatus] = useState<'pending' | 'confirming' | 'completed'>('pending');\n  const [confirmations, setConfirmations] = useState(0);\n\n  useEffect(() => {\n    // Countdown timer\n    const timer = setInterval(() => {\n      const newTimeLeft = Math.max(0, payment.timeoutAt - Date.now());\n      setTimeLeft(newTimeLeft);\n      \n      if (newTimeLeft === 0) {\n        onFailure();\n        clearInterval(timer);\n      }\n    }, 1000);\n\n    // Payment status checker\n    const statusChecker = setInterval(async () => {\n      try {\n        const response = await checkPaymentStatus(payment.orderId);\n        const { status, txHash, downloadLink } = response;\n\n        if (status === 'completed') {\n          setStatus('completed');\n          clearInterval(statusChecker);\n          clearInterval(timer);\n          onSuccess(txHash, downloadLink);\n        } else if (status === 'confirming') {\n          setStatus('confirming');\n          setConfirmations(prev => prev + 1);\n        }\n      } catch (error) {\n        console.error('Payment check failed:', error);\n      }\n    }, 5000); // Check every 5 seconds\n\n    return () => {\n      clearInterval(timer);\n      clearInterval(statusChecker);\n    };\n  }, [payment.orderId, payment.timeoutAt, onSuccess, onFailure]);\n\n  const minutes = Math.floor(timeLeft / 60000);\n  const seconds = Math.floor((timeLeft % 60000) / 1000);\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm text-gray-600 mb-1\">Time Remaining:</label>\n        <div className=\"text-2xl font-mono\">\n          {minutes}:{seconds.toString().padStart(2, '0')}\n        </div>\n      </div>\n\n      <div className=\"flex items-center gap-2\">\n        <div className={`w-3 h-3 rounded-full ${\n          status === 'completed' ? 'bg-green-500' :\n          status === 'confirming' ? 'bg-blue-500 animate-pulse' :\n          'bg-yellow-500 animate-pulse'\n        }`} />\n        <span className=\"font-medium\">\n          {status === 'completed' ? 'Payment Confirmed!' :\n           status === 'confirming' ? `Confirming (${confirmations} confirmations)` :\n           'Awaiting Payment...'}\n        </span>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/components/CryptoPayment.tsx"],"sourcesContent":["// // import { useState, useEffect } from 'react';\n// // import QRCode from 'qr-code-styling';\n// // import { useRouter } from 'next/navigation';\n\n// // interface CryptoPaymentProps {\n// //   orderId: string;\n// //   currency: string;\n// //   address: string;\n// //   amount: number;\n// //   expiresIn: number; // in seconds\n// // }\n\n// // export default function CryptoPayment({ orderId, currency, address, amount, expiresIn }: CryptoPaymentProps) {\n// //   const [timeLeft, setTimeLeft] = useState(expiresIn);\n// //   const [status, setStatus] = useState<'pending' | 'completed' | 'failed'>('pending');\n// //   const router = useRouter();\n\n// //   useEffect(() => {\n// //     // Generate QR Code\n// //     const qr = new QRCode({\n// //       width: 300,\n// //       height: 300,\n// //       data: `${currency.toLowerCase()}:${address}?amount=${amount}`,\n// //       dotsOptions: { color: '#2563eb', type: 'rounded' },\n// //       backgroundOptions: { color: '#ffffff' },\n// //       imageOptions: { hideBackgroundDots: true, imageSize: 0.4, margin: 0 }\n// //     });\n\n// //     const container = document.getElementById('qrcode');\n// //     if (container) {\n// //       container.innerHTML = '';\n// //       qr.append(container);\n// //     }\n\n// //     // Start countdown timer\n// //     const timer = setInterval(() => {\n// //       setTimeLeft(prev => {\n// //         if (prev <= 1) {\n// //           clearInterval(timer);\n// //           return 0;\n// //         }\n// //         return prev - 1;\n// //       });\n// //     }, 1000);\n\n// //     // Check payment status\n// //     const checkStatus = setInterval(async () => {\n// //       try {\n// //         const response = await fetch(`/api/payments/status/${orderId}`);\n// //         const data = await response.json();\n\n// //         if (data.status === 'completed') {\n// //           setStatus('completed');\n// //           clearInterval(checkStatus);\n// //           setTimeout(() => {\n// //             router.push(`/download?token=${data.downloadToken}`);\n// //           }, 3000);\n// //         }\n// //       } catch (error) {\n// //         console.error('Failed to check payment status:', error);\n// //       }\n// //     }, 10000);\n\n// //     return () => {\n// //       clearInterval(timer);\n// //       clearInterval(checkStatus);\n// //     };\n// //   }, [orderId, currency, address, amount]);\n\n// //   const minutes = Math.floor(timeLeft / 60);\n// //   const seconds = timeLeft % 60;\n\n// //   return (\n// //     <div className=\"max-w-md mx-auto p-6 bg-white rounded-xl shadow-lg\">\n// //       <div className=\"text-center mb-6\">\n// //         <h2 className=\"text-2xl font-bold text-gray-800\">Complete Payment</h2>\n// //         <p className=\"text-gray-600\">Send exactly {amount} {currency}</p>\n// //       </div>\n\n// //       {/* QR Code */}\n// //       <div className=\"bg-gray-50 p-4 rounded-lg mb-6\">\n// //         <div id=\"qrcode\" className=\"flex justify-center\" />\n// //       </div>\n\n// //       {/* Payment Details */}\n// //       <div className=\"space-y-4\">\n// //         <div>\n// //           <label className=\"block text-sm text-gray-600\">Send To Address:</label>\n// //           <div className=\"flex items-center gap-2\">\n// //             <input\n// //               type=\"text\"\n// //               value={address}\n// //               readOnly\n// //               className=\"w-full p-2 bg-gray-50 rounded border font-mono text-sm\"\n// //             />\n// //             <button\n// //               onClick={() => navigator.clipboard.writeText(address)}\n// //               className=\"p-2 text-blue-600 hover:text-blue-700\"\n// //             >\n// //               Copy\n// //             </button>\n// //           </div>\n// //         </div>\n\n// //         {/* Timer */}\n// //         <div className=\"flex items-center justify-between\">\n// //           <span className=\"text-sm text-gray-600\">Time Remaining:</span>\n// //           <span className=\"font-mono text-lg\">\n// //             {minutes}:{seconds.toString().padStart(2, '0')}\n// //           </span>\n// //         </div>\n\n// //         {/* Status */}\n// //         <div className=\"flex items-center gap-2 mt-4\">\n// //           <div className={`w-2 h-2 rounded-full ${\n// //             status === 'pending' ? 'bg-yellow-400' :\n// //             status === 'completed' ? 'bg-green-400' : 'bg-red-400'\n// //           }`} />\n// //           <span className=\"text-sm text-gray-600\">\n// //             {status === 'pending' ? 'Waiting for payment...' :\n// //              status === 'completed' ? 'Payment confirmed!' : 'Payment failed'}\n// //           </span>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n// 'use client';\n\n// import { useState, useEffect, useRef } from 'react';\n// import { useRouter } from 'next/navigation';\n// import QRCode from 'qr-code-styling';\n// import PaymentMonitor from './PaymentMonitor';\n\n// interface CryptoPaymentProps {\n//   orderId: string;\n//   currency: string;\n//   address: string;\n//   amount: number;\n//   expiresIn: number;\n// }\n\n// export default function CryptoPayment({ \n//   orderId, \n//   currency, \n//   address, \n//   amount, \n//   expiresIn \n// }: CryptoPaymentProps) {\n//   const router = useRouter();\n//   const [copied, setCopied] = useState(false);\n//   const qrRef = useRef<QRCode | null>(null);\n  \n//   useEffect(() => {\n//     // Clear any existing QR code\n//     const qrContainer = document.getElementById('qrcode');\n//     if (qrContainer) {\n//       qrContainer.innerHTML = '';\n//     }\n\n//     // Ensure address and amount are properly formatted\n//     const formattedAddress = address.replace(/\\s+/g, '');\n//     const formattedAmount = amount.toFixed(8);\n\n//     // Create new QR code\n//     qrRef.current = new QRCode({\n//       width: 300,\n//       height: 300,\n//       data: `${currency.toLowerCase()}:${formattedAddress}?amount=${formattedAmount}`,\n//       dotsOptions: { color: '#2563eb', type: 'rounded' },\n//       backgroundOptions: { color: '#ffffff' },\n//     });\n    \n//     qrRef.current.append(qrContainer!);\n\n//     // Cleanup on unmount\n//     return () => {\n//       if (qrContainer) {\n//         qrContainer.innerHTML = '';\n//       }\n//     };\n//   }, [address, amount, currency]);\n\n//   const payment = {\n//     orderId,\n//     currency,\n//     address,\n//     amount,\n//     status: 'pending' as const,\n//     timeoutAt: Date.now() + (expiresIn * 1000)\n//   };\n\n//   const handleSuccess = () => {\n//     router.push('/download');\n//   };\n\n//   const handleFailure = () => {\n//     router.push('/payments/status?error=failed');\n//   };\n\n//   const copyToClipboard = async () => {\n//     await navigator.clipboard.writeText(address);\n//     setCopied(true);\n//     setTimeout(() => setCopied(false), 2000);\n//   };\n\n//   return (\n//     <div className=\"max-w-xl mx-auto\">\n//       <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n//         {/* Header */}\n//         <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 p-6 text-white\">\n//           <h1 className=\"text-2xl font-bold text-center\">Complete Your Payment</h1>\n//           <p className=\"text-center opacity-90 mt-1\">\n//             Send exactly {amount} {currency}\n//           </p>\n//         </div>\n\n//         {/* QR Code */}\n//         <div className=\"p-8\">\n//           <div className=\"bg-gray-50 p-6 rounded-xl flex justify-center mb-6\">\n//             <div id=\"qrcode\" />\n//           </div>\n\n//           {/* Payment Details */}\n//           <div className=\"space-y-6\">\n//             <div>\n//               <label className=\"block text-sm text-gray-600 mb-2\">\n//                 Send Payment To:\n//               </label>\n//               <div className=\"flex items-center gap-2\">\n//                 <input\n//                   type=\"text\"\n//                   value={address}\n//                   readOnly\n//                   className=\"w-full p-3 bg-gray-50 rounded-lg border font-mono text-sm\"\n//                 />\n//                 <button\n//                   onClick={copyToClipboard}\n//                   className=\"p-2.5 text-gray-600 hover:text-blue-600 rounded-lg hover:bg-gray-50\"\n//                 >\n//                   {copied ? (\n//                     <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n//                       <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n//                     </svg>\n//                   ) : (\n//                     <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n//                       <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3\" />\n//                     </svg>\n//                   )}\n//                 </button>\n//               </div>\n//             </div>\n\n//             <PaymentMonitor\n//               payment={payment}\n//               onSuccess={handleSuccess}\n//               onFailure={handleFailure}\n//             />\n//           </div>\n//         </div>\n\n//         {/* Instructions */}\n//         <div className=\"border-t bg-gray-50 p-6\">\n//           <h3 className=\"font-medium mb-3\">Payment Instructions:</h3>\n//           <ol className=\"space-y-2 text-sm text-gray-600\">\n//             <li>1. Copy the address or scan the QR code</li>\n//             <li>2. Send exactly {amount} {currency}</li>\n//             <li>3. Wait for confirmation (~10-30 mins)</li>\n//             <li>4. You'll be redirected automatically</li>\n//           </ol>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport QRCode from 'qr-code-styling';\nimport PaymentMonitor from './PaymentMonitor';\n\ninterface CryptoPaymentProps {\n  orderId: string;\n  currency: string;\n  address: string;\n  amount: number;\n  expiresIn: number;\n}\n\nexport default function CryptoPayment({ \n  orderId, \n  currency, \n  address, \n  amount, \n  expiresIn \n}: CryptoPaymentProps) {\n  const router = useRouter();\n  const [copied, setCopied] = useState(false);\n  const qrRef = useRef<QRCode | null>(null);\n  \n  useEffect(() => {\n    // Clear any existing QR code\n    const qrContainer = document.getElementById('qrcode');\n    if (qrContainer) {\n      qrContainer.innerHTML = '';\n    }\n\n    // Ensure address and amount are properly formatted\n    const formattedAddress = address.replace(/\\s+/g, '');\n    const formattedAmount = amount.toFixed(8);\n\n    // Create new QR code\n    qrRef.current = new QRCode({\n      width: 300,\n      height: 300,\n      data: `bitcoin:${formattedAddress}?amount=${formattedAmount}`,\n      dotsOptions: { color: '#2563eb', type: 'rounded' },\n      backgroundOptions: { color: '#ffffff' },\n    });\n    \n    qrRef.current.append(qrContainer!);\n\n    // Cleanup on unmount\n    return () => {\n      if (qrContainer) {\n        qrContainer.innerHTML = '';\n      }\n    };\n  }, [address, amount, currency]);\n\n  const payment = {\n    orderId,\n    currency,\n    address,\n    amount,\n    status: 'pending' as 'pending' | 'completed' | 'failed',\n    timeoutAt: Date.now() + (expiresIn * 1000)\n  };\n\n  const handleSuccess = () => {\n    router.push('/download');\n  };\n\n  const handleFailure = () => {\n    router.push('/payments/status?error=failed');\n  };\n\n  const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(address);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto\">\n      <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 p-6 text-white\">\n          <h1 className=\"text-2xl font-bold text-center\">Complete Your Payment</h1>\n          <p className=\"text-center opacity-90 mt-1\">\n            Send exactly {amount} {currency}\n          </p>\n        </div>\n\n        {/* QR Code */}\n        <div className=\"p-8\">\n          <div className=\"bg-gray-50 p-6 rounded-xl flex justify-center mb-6\">\n            <div id=\"qrcode\" />\n          </div>\n\n          {/* Payment Details */}\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm text-gray-600 mb-2\">\n                Send Payment To:\n              </label>\n              <div className=\"flex items-center gap-2\">\n                <input\n                  type=\"text\"\n                  value={address}\n                  readOnly\n                  className=\"w-full p-3 bg-gray-50 rounded-lg border font-mono text-sm\"\n                />\n                <button\n                  onClick={copyToClipboard}\n                  className=\"p-2.5 text-gray-600 hover:text-blue-600 rounded-lg hover:bg-gray-50\"\n                >\n                  {copied ? (\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  ) : (\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3\" />\n                    </svg>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            <PaymentMonitor\n              payment={payment}\n              onSuccess={handleSuccess}\n              onFailure={handleFailure}\n            />\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"border-t bg-gray-50 p-6\">\n          <h3 className=\"font-medium mb-3\">Payment Instructions:</h3>\n          <ol className=\"space-y-2 text-sm text-gray-600\">\n            <li>1. Copy the address or scan the QR code</li>\n            <li>2. Send exactly {amount} {currency}</li>\n            <li>3. Wait for confirmation (~10-30 mins)</li>\n            <li>4. You'll be redirected automatically</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 987, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 993, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/app/payments/process/page.tsx"],"sourcesContent":["'use client';\n\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport CryptoPayment from '@/components/CryptoPayment';\n\nexport default function PaymentProcessPage() {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  \n  const orderId = searchParams.get('orderId') || '';\n  const currency = searchParams.get('currency') || '';\n  const address = searchParams.get('address') || '';\n  const amount = parseFloat(searchParams.get('amount') || '0');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <CryptoPayment\n        orderId={orderId}\n        currency={currency}\n        address={address}\n        amount={amount}\n        expiresIn={1800} // 30 minutes\n      />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKe,SAAS;;IACtB,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc;IAC/C,MAAM,WAAW,aAAa,GAAG,CAAC,eAAe;IACjD,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc;IAC/C,MAAM,SAAS,WAAW,aAAa,GAAG,CAAC,aAAa;IAExD,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC,sIAAA,CAAA,UAAa;YACZ,SAAS;YACT,UAAU;YACV,SAAS;YACT,QAAQ;YACR,WAAW;;;;;;;;;;;AAInB;GApBwB;;QACD,qIAAA,CAAA,kBAAe;QACrB,qIAAA,CAAA,YAAS;;;KAFF"}},
    {"offset": {"line": 1043, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}