{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/components/CryptoPayment.tsx"],"sourcesContent":["\n// 'use client';\n\n// import { useState, useEffect, useRef } from 'react';\n// import { useRouter } from 'next/navigation';\n// import QRCode from 'qr-code-styling';\n// import PaymentMonitor from './PaymentMonitor';\n\n// interface CryptoPaymentProps {\n//   orderId: string;\n//   currency: string;\n//   address: string;\n//   amount: number;\n//   expiresIn: number;\n// }\n\n// export default function CryptoPayment({ \n//   orderId, \n//   currency, \n//   address, \n//   amount, \n//   expiresIn \n// }: CryptoPaymentProps) {\n//   const router = useRouter();\n//   const [copied, setCopied] = useState(false);\n//   const qrRef = useRef<QRCode | null>(null);\n  \n//   useEffect(() => {\n//     // Clear any existing QR code\n//     const qrContainer = document.getElementById('qrcode');\n//     if (qrContainer) {\n//       qrContainer.innerHTML = '';\n//     }\n\n//     // Ensure address and amount are properly formatted\n//     const formattedAddress = address.replace(/\\s+/g, '');\n//     const formattedAmount = amount.toFixed(8);\n\n//     // Create new QR code\n//     qrRef.current = new QRCode({\n//       width: 300,\n//       height: 300,\n//       data: `bitcoin:${formattedAddress}?amount=${formattedAmount}`,\n//       dotsOptions: { color: '#2563eb', type: 'rounded' },\n//       backgroundOptions: { color: '#ffffff' },\n//     });\n    \n//     qrRef.current.append(qrContainer!);\n\n//     // Cleanup on unmount\n//     return () => {\n//       if (qrContainer) {\n//         qrContainer.innerHTML = '';\n//       }\n//     };\n//   }, [address, amount, currency]);\n\n//   const payment = {\n//     orderId,\n//     currency,\n//     address,\n//     amount,\n//     status: 'pending' as 'pending' | 'completed' | 'failed',\n//     timeoutAt: Date.now() + (expiresIn * 1000)\n//   };\n\n//   const handleSuccess = () => {\n//     router.push('/download');\n//   };\n\n//   const handleFailure = () => {\n//     router.push('/payments/status?error=failed');\n//   };\n\n//   const copyToClipboard = async () => {\n//     await navigator.clipboard.writeText(address);\n//     setCopied(true);\n//     setTimeout(() => setCopied(false), 2000);\n//   };\n\n//   return (\n//     <div className=\"max-w-xl mx-auto\">\n//       <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n//         {/* Header */}\n//         <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 p-6 text-white\">\n//           <h1 className=\"text-2xl font-bold text-center\">Complete Your Payment</h1>\n//           <p className=\"text-center opacity-90 mt-1\">\n//             Send exactly {amount} {currency}\n//           </p>\n//         </div>\n\n//         {/* QR Code */}\n//         <div className=\"p-8\">\n//           <div className=\"bg-gray-50 p-6 rounded-xl flex justify-center mb-6\">\n//             <div id=\"qrcode\" />\n//           </div>\n\n//           {/* Payment Details */}\n//           <div className=\"space-y-6\">\n//             <div>\n//               <label className=\"block text-sm text-gray-600 mb-2\">\n//                 Send Payment To:\n//               </label>\n//               <div className=\"flex items-center gap-2\">\n//                 <input\n//                   type=\"text\"\n//                   value={address}\n//                   readOnly\n//                   className=\"w-full p-3 bg-gray-50 rounded-lg border font-mono text-sm\"\n//                 />\n//                 <button\n//                   onClick={copyToClipboard}\n//                   className=\"p-2.5 text-gray-600 hover:text-blue-600 rounded-lg hover:bg-gray-50\"\n//                 >\n//                   {copied ? (\n//                     <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n//                       <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n//                     </svg>\n//                   ) : (\n//                     <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n//                       <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3\" />\n//                     </svg>\n//                   )}\n//                 </button>\n//               </div>\n//             </div>\n\n//             <PaymentMonitor\n//               payment={payment}\n//               onSuccess={handleSuccess}\n//               onFailure={handleFailure}\n//             />\n//           </div>\n//         </div>\n\n//         {/* Instructions */}\n//         <div className=\"border-t bg-gray-50 p-6\">\n//           <h3 className=\"font-medium mb-3\">Payment Instructions:</h3>\n//           <ol className=\"space-y-2 text-sm text-gray-600\">\n//             <li>1. Copy the address or scan the QR code</li>\n//             <li>2. Send exactly {amount} {currency}</li>\n//             <li>3. Wait for confirmation (~10-30 mins)</li>\n//             <li>4. You'll be redirected automatically</li>\n//           </ol>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// 'use client';\n\n// import { useState, useEffect, useRef } from 'react';\n// import { useRouter } from 'next/navigation';\n// import QRCode from 'qr-code-styling';\n// import PaymentMonitor from './PaymentMonitor';\n\n// interface CryptoPaymentProps {\n//   orderId: string;\n//   currency: string;\n//   address: string;\n//   amount: number;\n//   expiresIn: number;\n// }\n\n// export default function CryptoPayment({ \n//   orderId, \n//   currency, \n//   address, \n//   amount, \n//   expiresIn \n// }: CryptoPaymentProps) {\n//   const router = useRouter();\n//   const [copied, setCopied] = useState(false);\n//   const qrRef = useRef<QRCode | null>(null);\n  \n//   useEffect(() => {\n//     // Clear any existing QR code\n//     const qrContainer = document.getElementById('qrcode');\n//     if (qrContainer) {\n//       qrContainer.innerHTML = '';\n//     }\n\n//     // Ensure address and amount are properly formatted\n//     const formattedAddress = address.replace(/\\s+/g, '');\n//     const formattedAmount = amount.toFixed(8);\n\n//     // Create new QR code\n//     qrRef.current = new QRCode({\n//       width: 300,\n//       height: 300,\n//       data: `${currency.toLowerCase()}:${formattedAddress}?amount=${formattedAmount}`,\n//       dotsOptions: { color: '#2563eb', type: 'rounded' },\n//       backgroundOptions: { color: '#ffffff' },\n//     });\n    \n//     qrRef.current.append(qrContainer!);\n\n//     // Cleanup on unmount\n//     return () => {\n//       if (qrContainer) {\n//         qrContainer.innerHTML = '';\n//       }\n//     };\n//   }, [address, amount, currency]);\n\n//   const payment = {\n//     orderId,\n//     currency,\n//     address,\n//     amount,\n//     status: 'pending' as const,\n//     timeoutAt: Date.now() + (expiresIn * 1000)\n//   };\n\n//   const handleSuccess = (txHash: string, downloadLink: string) => {\n//     router.push(`/download?txHash=${txHash}&link=${downloadLink}`);\n//   };\n\n//   const handleFailure = () => {\n//     router.push('/payments/status?error=failed');\n//   };\n\n//   const copyToClipboard = async () => {\n//     await navigator.clipboard.writeText(address);\n//     setCopied(true);\n//     setTimeout(() => setCopied(false), 2000);\n//   };\n\n//   return (\n//     <div className=\"max-w-xl mx-auto\">\n//       <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n//         {/* Header */}\n//         <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 p-6 text-white\">\n//           <h1 className=\"text-2xl font-bold text-center\">Complete Your Payment</h1>\n//           <p className=\"text-center opacity-90 mt-1\">\n//             Send exactly {amount} {currency} \n//           </p>\n//         </div>\n\n//         {/* QR Code */}\n//         <div className=\"p-8\">\n//           <div className=\"bg-gray-50 p-6 rounded-xl flex justify-center mb-6\">\n//             <div id=\"qrcode\" />\n//           </div>\n\n//           {/* Payment Details */}\n//           <div className=\"space-y-6\">\n//             <div>\n//               <label className=\"block text-sm text-gray-600 mb-2\">\n//                 Send Payment To:\n//               </label>\n//               <div className=\"flex items-center gap-2\">\n//                 <input\n//                   type=\"text\"\n//                   value={address}\n//                   readOnly\n//                   className=\"w-full p-3 bg-gray-50 rounded-lg border font-mono text-sm\"\n//                 />\n//                 <button\n//                   onClick={copyToClipboard}\n//                   className=\"p-2.5 text-gray-600 hover:text-blue-600 rounded-lg hover:bg-gray-50\"\n//                 >\n//                   {copied ? (\n//                     <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n//                       <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n//                     </svg>\n//                   ) : (\n//                     <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n//                       <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3\" />\n//                     </svg>\n//                   )}\n//                 </button>\n//               </div>\n//             </div>\n\n//             <PaymentMonitor\n//               payment={payment}\n//               onSuccess={handleSuccess}\n//               onFailure={handleFailure}\n//             />\n//           </div>\n//         </div>\n\n//         {/* Instructions */}\n//         <div className=\"border-t bg-gray-50 p-6\">\n//           <h3 className=\"font-medium mb-3\">Payment Instructions:</h3>\n//           <ol className=\"space-y-2 text-sm text-gray-600\">\n//             <li>1. Copy the address or scan the QR code</li>\n//             <li>2. Send exactly {amount} {currency}</li>\n//             <li>3. Wait for confirmation (~10-30 mins)</li>\n//             <li>4. You'll be redirected automatically</li>\n//           </ol>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// 'use client';\n\n// import { useState, useEffect, useRef } from 'react';\n// import { useRouter } from 'next/navigation';\n// import QRCode from 'qr-code-styling';\n// import PaymentMonitor from './PaymentMonitor';\n\n// interface CryptoPaymentProps {\n//   orderId: string;\n//   currency: string;\n//   address: string;\n//   amount: number;\n//   expiresIn: number;\n//   qrData: string; // Add qrData prop\n// }\n\n// export default function CryptoPayment({ \n//   orderId, \n//   currency, \n//   address, \n//   amount, \n//   qrData,\n//   expiresIn,\n//  // Add qrData prop\n// }: CryptoPaymentProps) {\n//   console.log(\"🚀 ~ qrData:\", qrData)\n//   const router = useRouter();\n//   const [copied, setCopied] = useState(false);\n//   const qrRef = useRef<QRCode | null>(null);\n  \n//   useEffect(() => {\n//     // Clear any existing QR code\n//     const qrContainer = document.getElementById('qrcode');\n//     if (qrContainer) {\n//       qrContainer.innerHTML = '';\n//     }\n\n//     // Create new QR code using qrData\n//     qrRef.current = new QRCode({\n//       width: 300,\n//       height: 300,\n//       data: qrData, // Use qrData from props\n//       dotsOptions: { color: '#2563eb', type: 'rounded' },\n//       backgroundOptions: { color: '#ffffff' },\n//     });\n    \n//     qrRef.current.append(qrContainer!);\n\n//     // Cleanup on unmount\n//     return () => {\n//       if (qrContainer) {\n//         qrContainer.innerHTML = '';\n//       }\n//     };\n//   }, [qrData]);\n\n//   const payment = {\n//     orderId,\n//     currency,\n//     address,\n//     amount,\n//     qrData,\n//     status: 'pending' as const,\n//     timeoutAt: Date.now() + (expiresIn * 1000)\n//   };\n\n//   const handleSuccess = (txHash: string, downloadLink: string) => {\n//     router.push(`/download?txHash=${txHash}&link=${downloadLink}`);\n//   };\n\n//   const handleFailure = () => {\n//     router.push('/payments/status?error=failed');\n//   };\n\n//   const copyToClipboard = async () => {\n//     await navigator.clipboard.writeText(address);\n//     setCopied(true);\n//     setTimeout(() => setCopied(false), 2000);\n//   };\n\n//   return (\n//     <div className=\"max-w-xl mx-auto\">\n//       <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n//         {/* Header */}\n//         <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 p-6 text-white\">\n//           <h1 className=\"text-2xl font-bold text-center\">Complete Your Payment</h1>\n//           <p className=\"text-center opacity-90 mt-1\">\n//             Send exactly {amount} {currency} \n//           </p>\n//         </div>\n\n//         {/* QR Code */}\n//         <div className=\"p-8\">\n//           <div className=\"bg-gray-50 p-6 rounded-xl flex justify-center mb-6\">\n//             <div id=\"qrcode\" />\n//           </div>\n\n//           {/* Payment Details */}\n//           <div className=\"space-y-6\">\n//             <div>\n//               <label className=\"block text-sm text-gray-600 mb-2\">\n//                 Send Payment To:\n//               </label>\n//               <div className=\"flex items-center gap-2\">\n//                 <input\n//                   type=\"text\"\n//                   value={address}\n//                   readOnly\n//                   className=\"w-full p-3 bg-gray-50 rounded-lg border font-mono text-sm\"\n//                 />\n//                 <button\n//                   onClick={copyToClipboard}\n//                   className=\"p-2.5 text-gray-600 hover:text-blue-600 rounded-lg hover:bg-gray-50\"\n//                 >\n//                   {copied ? (\n//                     <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n//                       <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n//                     </svg>\n//                   ) : (\n//                     <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n//                       <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3\" />\n//                     </svg>\n//                   )}\n//                 </button>\n//               </div>\n//             </div>\n\n//             <PaymentMonitor\n//               payment={payment}\n//               onSuccess={handleSuccess}\n//               onFailure={handleFailure}\n//             />\n//           </div>\n//         </div>\n\n//         {/* Instructions */}\n//         <div className=\"border-t bg-gray-50 p-6\">\n//           <h3 className=\"font-medium mb-3\">Payment Instructions:</h3>\n//           <ol className=\"space-y-2 text-sm text-gray-600\">\n//             <li>1. Copy the address or scan the QR code</li>\n//             <li>2. Send exactly {amount} {currency}</li>\n//             <li>3. Wait for confirmation (~10-30 mins)</li>\n//             <li>4. You'll be redirected automatically</li>\n//           </ol>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }"],"names":[],"mappings":"AACA,gBAAgB;AAEhB,uDAAuD;AACvD,+CAA+C;AAC/C,wCAAwC;AACxC,iDAAiD;AAEjD,iCAAiC;AACjC,qBAAqB;AACrB,sBAAsB;AACtB,qBAAqB;AACrB,oBAAoB;AACpB,uBAAuB;AACvB,IAAI;AAEJ,2CAA2C;AAC3C,cAAc;AACd,eAAe;AACf,cAAc;AACd,aAAa;AACb,eAAe;AACf,2BAA2B;AAC3B,gCAAgC;AAChC,iDAAiD;AACjD,+CAA+C;AAE/C,sBAAsB;AACtB,oCAAoC;AACpC,6DAA6D;AAC7D,yBAAyB;AACzB,oCAAoC;AACpC,QAAQ;AAER,0DAA0D;AAC1D,4DAA4D;AAC5D,iDAAiD;AAEjD,4BAA4B;AAC5B,mCAAmC;AACnC,oBAAoB;AACpB,qBAAqB;AACrB,uEAAuE;AACvE,4DAA4D;AAC5D,iDAAiD;AACjD,UAAU;AAEV,0CAA0C;AAE1C,4BAA4B;AAC5B,qBAAqB;AACrB,2BAA2B;AAC3B,sCAAsC;AACtC,UAAU;AACV,SAAS;AACT,qCAAqC;AAErC,sBAAsB;AACtB,eAAe;AACf,gBAAgB;AAChB,eAAe;AACf,cAAc;AACd,+DAA+D;AAC/D,iDAAiD;AACjD,OAAO;AAEP,kCAAkC;AAClC,gCAAgC;AAChC,OAAO;AAEP,kCAAkC;AAClC,oDAAoD;AACpD,OAAO;AAEP,0CAA0C;AAC1C,oDAAoD;AACpD,uBAAuB;AACvB,gDAAgD;AAChD,OAAO;AAEP,aAAa;AACb,yCAAyC;AACzC,yEAAyE;AACzE,yBAAyB;AACzB,sFAAsF;AACtF,sFAAsF;AACtF,wDAAwD;AACxD,+CAA+C;AAC/C,iBAAiB;AACjB,iBAAiB;AAEjB,0BAA0B;AAC1B,gCAAgC;AAChC,iFAAiF;AACjF,kCAAkC;AAClC,mBAAmB;AAEnB,oCAAoC;AACpC,wCAAwC;AACxC,oBAAoB;AACpB,qEAAqE;AACrE,mCAAmC;AACnC,yBAAyB;AACzB,0DAA0D;AAC1D,yBAAyB;AACzB,gCAAgC;AAChC,oCAAoC;AACpC,6BAA6B;AAC7B,0FAA0F;AAC1F,qBAAqB;AACrB,0BAA0B;AAC1B,8CAA8C;AAC9C,oGAAoG;AACpG,oBAAoB;AACpB,gCAAgC;AAChC,sGAAsG;AACtG,iHAAiH;AACjH,6BAA6B;AAC7B,0BAA0B;AAC1B,sGAAsG;AACtG,iOAAiO;AACjO,6BAA6B;AAC7B,uBAAuB;AACvB,4BAA4B;AAC5B,uBAAuB;AACvB,qBAAqB;AAErB,8BAA8B;AAC9B,kCAAkC;AAClC,0CAA0C;AAC1C,0CAA0C;AAC1C,iBAAiB;AACjB,mBAAmB;AACnB,iBAAiB;AAEjB,+BAA+B;AAC/B,oDAAoD;AACpD,wEAAwE;AACxE,6DAA6D;AAC7D,+DAA+D;AAC/D,2DAA2D;AAC3D,8DAA8D;AAC9D,6DAA6D;AAC7D,kBAAkB;AAClB,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,OAAO;AACP,IAAI;AAEJ,gBAAgB;AAEhB,uDAAuD;AACvD,+CAA+C;AAC/C,wCAAwC;AACxC,iDAAiD;AAEjD,iCAAiC;AACjC,qBAAqB;AACrB,sBAAsB;AACtB,qBAAqB;AACrB,oBAAoB;AACpB,uBAAuB;AACvB,IAAI;AAEJ,2CAA2C;AAC3C,cAAc;AACd,eAAe;AACf,cAAc;AACd,aAAa;AACb,eAAe;AACf,2BAA2B;AAC3B,gCAAgC;AAChC,iDAAiD;AACjD,+CAA+C;AAE/C,sBAAsB;AACtB,oCAAoC;AACpC,6DAA6D;AAC7D,yBAAyB;AACzB,oCAAoC;AACpC,QAAQ;AAER,0DAA0D;AAC1D,4DAA4D;AAC5D,iDAAiD;AAEjD,4BAA4B;AAC5B,mCAAmC;AACnC,oBAAoB;AACpB,qBAAqB;AACrB,yFAAyF;AACzF,4DAA4D;AAC5D,iDAAiD;AACjD,UAAU;AAEV,0CAA0C;AAE1C,4BAA4B;AAC5B,qBAAqB;AACrB,2BAA2B;AAC3B,sCAAsC;AACtC,UAAU;AACV,SAAS;AACT,qCAAqC;AAErC,sBAAsB;AACtB,eAAe;AACf,gBAAgB;AAChB,eAAe;AACf,cAAc;AACd,kCAAkC;AAClC,iDAAiD;AACjD,OAAO;AAEP,sEAAsE;AACtE,sEAAsE;AACtE,OAAO;AAEP,kCAAkC;AAClC,oDAAoD;AACpD,OAAO;AAEP,0CAA0C;AAC1C,oDAAoD;AACpD,uBAAuB;AACvB,gDAAgD;AAChD,OAAO;AAEP,aAAa;AACb,yCAAyC;AACzC,yEAAyE;AACzE,yBAAyB;AACzB,sFAAsF;AACtF,sFAAsF;AACtF,wDAAwD;AACxD,gDAAgD;AAChD,iBAAiB;AACjB,iBAAiB;AAEjB,0BAA0B;AAC1B,gCAAgC;AAChC,iFAAiF;AACjF,kCAAkC;AAClC,mBAAmB;AAEnB,oCAAoC;AACpC,wCAAwC;AACxC,oBAAoB;AACpB,qEAAqE;AACrE,mCAAmC;AACnC,yBAAyB;AACzB,0DAA0D;AAC1D,yBAAyB;AACzB,gCAAgC;AAChC,oCAAoC;AACpC,6BAA6B;AAC7B,0FAA0F;AAC1F,qBAAqB;AACrB,0BAA0B;AAC1B,8CAA8C;AAC9C,oGAAoG;AACpG,oBAAoB;AACpB,gCAAgC;AAChC,sGAAsG;AACtG,iHAAiH;AACjH,6BAA6B;AAC7B,0BAA0B;AAC1B,sGAAsG;AACtG,iOAAiO;AACjO,6BAA6B;AAC7B,uBAAuB;AACvB,4BAA4B;AAC5B,uBAAuB;AACvB,qBAAqB;AAErB,8BAA8B;AAC9B,kCAAkC;AAClC,0CAA0C;AAC1C,0CAA0C;AAC1C,iBAAiB;AACjB,mBAAmB;AACnB,iBAAiB;AAEjB,+BAA+B;AAC/B,oDAAoD;AACpD,wEAAwE;AACxE,6DAA6D;AAC7D,+DAA+D;AAC/D,2DAA2D;AAC3D,8DAA8D;AAC9D,6DAA6D;AAC7D,kBAAkB;AAClB,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,OAAO;AACP,IAAI;AAEJ,gBAAgB;AAEhB,uDAAuD;AACvD,+CAA+C;AAC/C,wCAAwC;AACxC,iDAAiD;AAEjD,iCAAiC;AACjC,qBAAqB;AACrB,sBAAsB;AACtB,qBAAqB;AACrB,oBAAoB;AACpB,uBAAuB;AACvB,uCAAuC;AACvC,IAAI;AAEJ,2CAA2C;AAC3C,cAAc;AACd,eAAe;AACf,cAAc;AACd,aAAa;AACb,YAAY;AACZ,eAAe;AACf,sBAAsB;AACtB,2BAA2B;AAC3B,wCAAwC;AACxC,gCAAgC;AAChC,iDAAiD;AACjD,+CAA+C;AAE/C,sBAAsB;AACtB,oCAAoC;AACpC,6DAA6D;AAC7D,yBAAyB;AACzB,oCAAoC;AACpC,QAAQ;AAER,yCAAyC;AACzC,mCAAmC;AACnC,oBAAoB;AACpB,qBAAqB;AACrB,+CAA+C;AAC/C,4DAA4D;AAC5D,iDAAiD;AACjD,UAAU;AAEV,0CAA0C;AAE1C,4BAA4B;AAC5B,qBAAqB;AACrB,2BAA2B;AAC3B,sCAAsC;AACtC,UAAU;AACV,SAAS;AACT,kBAAkB;AAElB,sBAAsB;AACtB,eAAe;AACf,gBAAgB;AAChB,eAAe;AACf,cAAc;AACd,cAAc;AACd,kCAAkC;AAClC,iDAAiD;AACjD,OAAO;AAEP,sEAAsE;AACtE,sEAAsE;AACtE,OAAO;AAEP,kCAAkC;AAClC,oDAAoD;AACpD,OAAO;AAEP,0CAA0C;AAC1C,oDAAoD;AACpD,uBAAuB;AACvB,gDAAgD;AAChD,OAAO;AAEP,aAAa;AACb,yCAAyC;AACzC,yEAAyE;AACzE,yBAAyB;AACzB,sFAAsF;AACtF,sFAAsF;AACtF,wDAAwD;AACxD,gDAAgD;AAChD,iBAAiB;AACjB,iBAAiB;AAEjB,0BAA0B;AAC1B,gCAAgC;AAChC,iFAAiF;AACjF,kCAAkC;AAClC,mBAAmB;AAEnB,oCAAoC;AACpC,wCAAwC;AACxC,oBAAoB;AACpB,qEAAqE;AACrE,mCAAmC;AACnC,yBAAyB;AACzB,0DAA0D;AAC1D,yBAAyB;AACzB,gCAAgC;AAChC,oCAAoC;AACpC,6BAA6B;AAC7B,0FAA0F;AAC1F,qBAAqB;AACrB,0BAA0B;AAC1B,8CAA8C;AAC9C,oGAAoG;AACpG,oBAAoB;AACpB,gCAAgC;AAChC,sGAAsG;AACtG,iHAAiH;AACjH,6BAA6B;AAC7B,0BAA0B;AAC1B,sGAAsG;AACtG,iOAAiO;AACjO,6BAA6B;AAC7B,uBAAuB;AACvB,4BAA4B;AAC5B,uBAAuB;AACvB,qBAAqB;AAErB,8BAA8B;AAC9B,kCAAkC;AAClC,0CAA0C;AAC1C,0CAA0C;AAC1C,iBAAiB;AACjB,mBAAmB;AACnB,iBAAiB;AAEjB,+BAA+B;AAC/B,oDAAoD;AACpD,wEAAwE;AACxE,6DAA6D;AAC7D,+DAA+D;AAC/D,2DAA2D;AAC3D,8DAA8D;AAC9D,6DAA6D;AAC7D,kBAAkB;AAClB,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,OAAO;AACP,IAAI"}},
    {"offset": {"line": 404, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/app/payments/process/page.tsx"],"sourcesContent":["'use client';\n\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport CryptoPayment from '@/components/CryptoPayment';\n\nexport default function PaymentProcessPage() {\n  const searchParams = useSearchParams();\n  // const router = useRouter();\n  \n  const orderId = searchParams.get('orderId') || '';\n  const currency = searchParams.get('currency') || '';\n  const address = searchParams.get('address') || '';\n  const qrData = searchParams.get('qrData') || '';\n  console.log(\"🚀 ~ PaymentProcessPage ~ qrData:\", qrData)\n  const amount = parseFloat(searchParams.get('amount') || '0');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <CryptoPayment\n        orderId={orderId}\n        currency={currency}\n        address={address}\n        amount={amount}\n        qrData= {qrData}\n        expiresIn={3600} // 30 minutes\n      \n      />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKe,SAAS;;IACtB,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IACnC,8BAA8B;IAE9B,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc;IAC/C,MAAM,WAAW,aAAa,GAAG,CAAC,eAAe;IACjD,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc;IAC/C,MAAM,SAAS,aAAa,GAAG,CAAC,aAAa;IAC7C,QAAQ,GAAG,CAAC,qCAAqC;IACjD,MAAM,SAAS,WAAW,aAAa,GAAG,CAAC,aAAa;IAExD,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC,sIAAA,CAAA,UAAa;YACZ,SAAS;YACT,UAAU;YACV,SAAS;YACT,QAAQ;YACR,QAAS;YACT,WAAW;;;;;;;;;;;AAKnB;GAxBwB;;QACD,qIAAA,CAAA,kBAAe;;;KADd"}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 472, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0]}},
    {"offset": {"line": 473, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}