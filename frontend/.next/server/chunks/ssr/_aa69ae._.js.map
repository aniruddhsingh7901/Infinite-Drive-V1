{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/app/checkout/page.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useCart } from '@/lib/cart/CartContext';\nimport { QRCodeCanvas } from 'qrcode.react';\n\n\nconst CheckoutPage = () => {\n  const { items, total } = useCart();\n  const [email, setEmail] = useState('');\n  const [selectedCrypto, setSelectedCrypto] = useState('');\n  const [paymentStatus, setPaymentStatus] = useState('pending');\n  const [qrData, setQrData] = useState('');\n  const [downloadLink, setDownloadLink] = useState('');\n\n  const cryptoOptions = [\n    { value: 'BTC', label: 'Bitcoin' },\n    { value: 'LTC', label: 'Litecoin' },\n    { value: 'TRON', label: 'Tron' },\n    { value: 'MONERO', label: 'Monero' },\n    { value: 'ZCASH', label: 'Zcash' },\n    { value: 'USDT', label: 'USDT' },\n    { value: 'SOL', label: 'Solana' }\n  ];\n\n  const initiatePayment = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/payment/init', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          items: items,\n          email,\n          currency: selectedCrypto,\n          amount: total\n        })\n      });\n\n      const data = await response.json();\n      setQrData(data.qrCode);\n      \n      // Start polling for payment status\n      pollPaymentStatus(data.orderId);\n    } catch (error) {\n      console.error('Payment initiation failed:', error);\n    }\n  };\n\n  const pollPaymentStatus = async (orderId: string) => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/payment/status/${orderId}`);\n        const data = await response.json();\n        \n        if (data.status === 'completed') {\n          setPaymentStatus('completed');\n          setDownloadLink(data.downloadLink);\n          clearInterval(interval);\n        } else if (data.status === 'failed') {\n          setPaymentStatus('failed');\n          clearInterval(interval);\n        }\n      } catch (error) {\n        console.error('Payment status check failed:', error);\n      }\n    }, 5000); // Check every 5 seconds\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Checkout</h1>\n      \n      {/* Cart Summary */}\n      <div className=\"mb-6\">\n        {items.map(item => (\n          <div key={item.id} className=\"flex justify-between mb-2\">\n            <span>{item.title}</span>\n            <span>${item.price}</span>\n          </div>\n        ))}\n        <div className=\"text-xl font-bold mt-4\">\n          Total: ${total}\n        </div>\n      </div>\n\n      {/* Email Input */}\n      <div className=\"mb-6\">\n        <input\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"Enter your email\"\n          className=\"w-full p-2 border rounded\"\n        />\n      </div>\n\n      {/* Crypto Selection */}\n      <div className=\"mb-6\">\n        <select\n          value={selectedCrypto}\n          onChange={(e) => setSelectedCrypto(e.target.value)}\n          className=\"w-full p-2 border rounded\"\n        >\n          <option value=\"\">Select payment method</option>\n          {cryptoOptions.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Payment Button */}\n      <button\n        onClick={initiatePayment}\n        disabled={!email || !selectedCrypto}\n        className=\"w-full bg-blue-600 text-white p-3 rounded disabled:bg-gray-400\"\n      >\n        Pay Now\n      </button>\n\n      {/* QR Code */}\n      {qrData && (\n        <div className=\"mt-6 text-center\">\n          <QRCodeCanvas value={qrData} size={256} />\n          <p className=\"mt-2\">Scan QR code to pay</p>\n        </div>\n      )}\n\n      {/* Payment Status */}\n      {paymentStatus === 'completed' && (\n        <div className=\"mt-6 text-green-600\">\n          <p>Payment successful!</p>\n          <a href={downloadLink} className=\"text-blue-600 underline\">\n            Download your ebook\n          </a>\n        </div>\n      )}\n\n      {paymentStatus === 'failed' && (\n        <div className=\"mt-6 text-red-600\">\n          <p>Payment failed. Please try again.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CheckoutPage;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}