{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/components/PaymentMonitor.tsx"],"sourcesContent":["\n\n// 'use client';\n\n// import { useState, useEffect, useRef } from 'react';\n// import { useRouter } from 'next/navigation';\n// import { CryptoPayment } from '@/services/crypto';\n\n// interface PaymentMonitorProps {\n//   payment: CryptoPayment;\n//   onSuccess: (txHash: string, downloadLink: string) => void;\n//   onFailure: () => void;\n// }\n\n// export default function PaymentMonitor({ payment, onSuccess, onFailure }: PaymentMonitorProps) {\n//   const [timeLeft, setTimeLeft] = useState<number>(\n//     Math.max(0, payment.timeoutAt - Date.now())\n//   );\n//   const [status, setStatus] = useState<'pending' | 'confirming' | 'completed'>('pending');\n//   const [confirmations, setConfirmations] = useState(0);\n//   const wsRef = useRef<WebSocket | null>(null);\n//   const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n//   useEffect(() => {\n//     // Countdown timer\n//     timerRef.current = setInterval(() => {\n//       const newTimeLeft = Math.max(0, payment.timeoutAt - Date.now());\n//       setTimeLeft(newTimeLeft);\n      \n//       if (newTimeLeft === 0) {\n//         onFailure();\n//         if (timerRef.current) clearInterval(timerRef.current);\n//       }\n//     }, 1000);\n\n//     // WebSocket to listen for payment status updates\n//     if (!wsRef.current) {\n//       const ws = new WebSocket('wss://d840-2409-40c4-302a-1c2c-44d8-3dd2-ff2b-e830.ngrok-free.app'); // Replace with your ngrok URL\n//       wsRef.current = ws;\n\n//       ws.onopen = () => {\n//         console.log('WebSocket connection established');\n//       };\n\n//       // ws.onerror = (error) => {\n//       //   console.error('WebSocket error:', error);\n//       // };\n\n//       ws.onmessage = (event) => {\n//         const message = JSON.parse(event.data);\n//         console.log(\"ðŸš€ ~ useEffect ~ message:\", message);\n//         if (message.event === 'paymentStatus' && message.data.orderId === payment.orderId) {\n//           const { status, txHash, downloadLink } = message.data;\n//           if (status === 'completed') {\n//             setStatus('completed');\n//             if (timerRef.current) clearInterval(timerRef.current);\n//             onSuccess(txHash, downloadLink);\n//           } else if (status === 'confirming') {\n//             setStatus('confirming');\n//             setConfirmations(prev => prev + 1);\n//           }\n//         }\n//       };\n//     }\n\n//     // Cleanup on component unmount\n//     return () => {\n//       if (timerRef.current) clearInterval(timerRef.current);\n//       if (wsRef.current) {\n//         wsRef.current.close();\n//         wsRef.current = null;\n//       }\n//     };\n//   }, [payment.orderId, payment.timeoutAt, onSuccess, onFailure]);\n\n//   const minutes = Math.floor(timeLeft / 60000);\n//   const seconds = Math.floor((timeLeft % 60000) / 1000);\n\n//   return (\n//     <div className=\"space-y-4\">\n//       <div>\n//         <label className=\"block text-sm text-gray-600 mb-1\">Time Remaining:</label>\n//         <div className=\"text-2xl font-mono\">\n//           {minutes}:{seconds.toString().padStart(2, '0')}\n//         </div>\n//       </div>\n\n//       <div className=\"flex items-center gap-2\">\n//         <div className={`w-3 h-3 rounded-full ${\n//           status === 'completed' ? 'bg-green-500' :\n//           status === 'confirming' ? 'bg-blue-500 animate-pulse' :\n//           'bg-yellow-500 animate-pulse'\n//         }`} />\n//         <span className=\"font-medium\">\n//           {status === 'completed' ? 'Payment Confirmed!' :\n//            status === 'confirming' ? `Confirming (${confirmations} confirmations)` :\n//            'Awaiting Payment...'}\n//         </span>\n//       </div>\n//     </div>\n//   );\n// }\n'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\n\ninterface PaymentMonitorProps {\n  payment: {\n    orderId: string;\n    timeoutAt: number;\n  };\n  onSuccess: (txHash: string, downloadLink: string, email: string) => void;\n  onFailure: () => void;\n}\n\nexport default function PaymentMonitor({ payment, onSuccess, onFailure }: PaymentMonitorProps) {\n  const [timeLeft, setTimeLeft] = useState<number>(Math.max(0, payment.timeoutAt - Date.now()));\n  const [status, setStatus] = useState<'pending' | 'confirming' | 'completed'>('pending');\n  const router = useRouter();\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const pollRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    // Countdown timer\n    timerRef.current = setInterval(() => {\n      const newTimeLeft = Math.max(0, payment.timeoutAt - Date.now());\n      setTimeLeft(newTimeLeft);\n      \n      if (newTimeLeft === 0) {\n        onFailure();\n        if (timerRef.current) clearInterval(timerRef.current);\n      }\n    }, 1000);\n\n    // Polling API to check order status\n    pollRef.current = setInterval(async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/orders/check-status/${payment.orderId}`);\n        const data = await response.json();\n        console.log(\"ðŸš€ ~ pollRef.current=setInterval ~ data:\", data)\n\n        if (data.status === 'completed') {\n          if (pollRef.current) clearInterval(pollRef.current);\n          onSuccess(data.txHash, data.downloadLink, data.email);\n        } else {\n          setStatus(data.status);\n        }\n      } catch (error) {\n        console.error('Error checking order status:', error);\n      }\n    }, 120000); // Poll every 2 minutes\n\n    // Cleanup on component unmount\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n      if (pollRef.current) clearInterval(pollRef.current);\n    };\n  }, [payment.orderId, payment.timeoutAt, onFailure, onSuccess]);\n\n  const minutes = Math.floor(timeLeft / 60000);\n  const seconds = Math.floor((timeLeft % 60000) / 1000);\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm text-gray-600 mb-1\">Time Remaining:</label>\n        <div className=\"text-2xl font-mono\">\n          {minutes}:{seconds.toString().padStart(2, '0')}\n        </div>\n      </div>\n\n      <div className=\"flex items-center gap-2\">\n        <div className={`w-3 h-3 rounded-full ${\n          status === 'completed' ? 'bg-green-500' :\n          status === 'confirming' ? 'bg-green-500 animate-pulse' :\n          'bg-yellow-500 animate-pulse'\n        }`} />\n        <span className=\"font-medium\">\n          {status === 'completed' ? 'Payment Confirmed!' :\n           status === 'confirming' ? 'Confirming...' :\n           'Awaiting Payment...'}\n        </span>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/components/CryptoPayment.tsx"],"sourcesContent":["\n// 'use client';\n\n// import { useState, useEffect, useRef } from 'react';\n// import { useRouter } from 'next/navigation';\n// import QRCode from 'qr-code-styling';\n// import PaymentMonitor from './PaymentMonitor';\n\n// interface CryptoPaymentProps {\n//   orderId: string;\n//   currency: string;\n//   address: string;\n//   amount: number;\n//   expiresIn: number;\n//   qrData: string;\n// }\n\n// export default function CryptoPayment({ \n//   orderId, \n//   currency, \n//   address, \n//   amount, \n//   expiresIn,\n//   qrData \n// }: CryptoPaymentProps) {\n//   const router = useRouter();\n//   const qrRef = useRef<QRCode | null>(null);\n  \n//   useEffect(() => {\n//     // Clear any existing QR code\n//     const qrContainer = document.getElementById('qrcode');\n//     if (qrContainer) {\n//       qrContainer.innerHTML = '';\n//     }\n\n//     // Create new QR code using qrData\n//     qrRef.current = new QRCode({\n//       width: 300,\n//       height: 300,\n//       data: qrData, // Use qrData from props\n//       dotsOptions: { color: '#2563eb', type: 'rounded' },\n//       backgroundOptions: { color: '#ffffff' },\n//     });\n    \n//     qrRef.current.append(qrContainer!);\n\n//     // Cleanup on unmount\n//     return () => {\n//       if (qrContainer) {\n//         qrContainer.innerHTML = '';\n//       }\n//     };\n//   }, [qrData]); // Only depend on qrData\n\n//   const payment = {\n//     orderId,\n//     currency,\n//     address,\n//     amount,\n//     status: 'pending' as const,\n//     timeoutAt: Date.now() + (expiresIn * 1000)\n//   };\n\n//   const handleSuccess = (txHash: string, downloadLink: string) => {\n//     router.push(`/download?txHash=${txHash}&link=${downloadLink}`);\n//   };\n\n//   const handleFailure = () => {\n//     router.push('/payments/status?error=failed');\n//   };\n\n//   return (\n//     <div className=\"max-w-xl mx-auto\">\n//       <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n//         {/* Header */}\n//         <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 p-6 text-white\">\n//           <h1 className=\"text-2xl font-bold text-center\">Complete Your Payment</h1>\n//           <p className=\"text-center opacity-90 mt-1\">\n//             Send exactly {amount} {currency} \n//           </p>\n//         </div>\n\n//         {/* QR Code */}\n//         <div className=\"p-8\">\n//           <div className=\"bg-gray-50 p-6 rounded-xl flex justify-center mb-6\">\n//             <div id=\"qrcode\" />\n//           </div>\n\n//           {/* Payment Details */}\n//           <div className=\"space-y-6\">\n//             <div>\n//               <label className=\"block text-sm text-gray-600 mb-2\">\n//                 Send Payment To:\n//               </label>\n//               <div className=\"flex items-center gap-2\">\n//                 <input\n//                   type=\"text\"\n//                   value={address}\n//                   readOnly\n//                   className=\"w-full p-3 bg-gray-50 rounded-lg border font-mono text-sm\"\n//                 />\n//               </div>\n//             </div>\n\n//             <PaymentMonitor\n//               payment={payment}\n//               onSuccess={handleSuccess}\n//               onFailure={handleFailure}\n//             />\n//           </div>\n//         </div>\n\n//         {/* Instructions */}\n//         <div className=\"border-t bg-gray-50 p-6\">\n//           <h3 className=\"font-medium mb-3\">Payment Instructions:</h3>\n//           <ol className=\"space-y-2 text-sm text-gray-600\">\n//             <li>1. Scan the QR code</li>\n//             <li>2. Send exactly {amount} {currency}</li>\n//             <li>3. Wait for confirmation (~10-30 mins)</li>\n//             <li>4. You'll be redirected automatically</li>\n//           </ol>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport QRCode from 'qr-code-styling';\nimport PaymentMonitor from './PaymentMonitor';\n\ninterface CryptoPaymentProps {\n  orderId: string;\n  currency: string;\n  address: string;\n  amount: number;\n  expiresIn: number;\n  qrData: string;\n}\n\nexport default function CryptoPayment({ \n  orderId, \n  currency, \n  address, \n  amount, \n  expiresIn,\n  qrData \n}: CryptoPaymentProps) {\n  const router = useRouter();\n  const qrRef = useRef<QRCode | null>(null);\n  \n  useEffect(() => {\n    // Clear any existing QR code\n    const qrContainer = document.getElementById('qrcode');\n    if (qrContainer) {\n      qrContainer.innerHTML = '';\n    }\n\n    // Create new QR code using qrData\n    qrRef.current = new QRCode({\n      width: 300,\n      height: 300,\n      data: qrData, // Use qrData from props\n      dotsOptions: { color: '#2563eb', type: 'rounded' },\n      backgroundOptions: { color: '#ffffff' },\n    });\n    \n    qrRef.current.append(qrContainer!);\n\n    // Cleanup on unmount\n    return () => {\n      if (qrContainer) {\n        qrContainer.innerHTML = '';\n      }\n    };\n  }, [qrData]); // Only depend on qrData\n\n  const payment = {\n    orderId,\n    currency,\n    address,\n    amount,\n    status: 'pending' as const,\n    timeoutAt: Date.now() + (expiresIn * 1000)\n  };\n\n  const handleSuccess = (txHash: string, downloadLink: string, email: string) => {\n    router.push(`/download?txHash=${txHash}&link=${downloadLink}&email=${email}`);\n  };\n\n  const handleFailure = () => {\n    router.push('/payments/status?error=failed');\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto\">\n      <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 p-6 text-white\">\n          <h1 className=\"text-2xl font-bold text-center\">Complete Your Payment</h1>\n          <p className=\"text-center opacity-90 mt-1\">\n            Send exactly {amount} {currency} \n          </p>\n        </div>\n\n        {/* QR Code */}\n        <div className=\"p-8\">\n          <div className=\"bg-gray-50 p-6 rounded-xl flex justify-center mb-6\">\n            <div id=\"qrcode\" />\n          </div>\n\n          {/* Payment Details */}\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm text-gray-600 mb-2\">\n                Send Payment To:\n              </label>\n              <div className=\"flex items-center gap-2\">\n                <input\n                  type=\"text\"\n                  value={address}\n                  readOnly\n                  className=\"w-full p-3 bg-gray-50 rounded-lg border font-mono text-sm\"\n                />\n              </div>\n            </div>\n\n            <PaymentMonitor\n              payment={payment}\n              onSuccess={handleSuccess}\n              onFailure={handleFailure}\n            />\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"border-t bg-gray-50 p-6\">\n          <h3 className=\"font-medium mb-3\">Payment Instructions:</h3>\n          <ol className=\"space-y-2 text-sm text-gray-600\">\n            <li>1. Scan the QR code</li>\n            <li>2. Send exactly {amount} {currency}</li>\n            <li>3. Wait for confirmation (~10-60 mins)</li>\n            <li>4. You'll be redirected automatically</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/app/payments/process/page.tsx"],"sourcesContent":["'use client';\n\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport CryptoPayment from '@/components/CryptoPayment';\n\nexport default function PaymentProcessPage() {\n  const searchParams = useSearchParams();\n  // const router = useRouter();\n  \n  const orderId = searchParams.get('orderId') || '';\n  const currency = searchParams.get('currency') || '';\n  const address = searchParams.get('address') || '';\n  const qrData = searchParams.get('qrData') || '';\n  console.log(\"ðŸš€ ~ PaymentProcessPage ~ qrData:\", qrData)\n  const amount = parseFloat(searchParams.get('amount') || '0');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <CryptoPayment\n        orderId={orderId}\n        currency={currency}\n        address={address}\n        amount={amount}\n        qrData= {qrData}\n        expiresIn={3600} // 30 minutes\n      \n      />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IACtB,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IACnC,8BAA8B;IAE9B,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc;IAC/C,MAAM,WAAW,aAAa,GAAG,CAAC,eAAe;IACjD,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc;IAC/C,MAAM,SAAS,aAAa,GAAG,CAAC,aAAa;IAC7C,QAAQ,GAAG,CAAC,qCAAqC;IACjD,MAAM,SAAS,WAAW,aAAa,GAAG,CAAC,aAAa;IAExD,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,mIAAA,CAAA,UAAa;YACZ,SAAS;YACT,UAAU;YACV,SAAS;YACT,QAAQ;YACR,QAAS;YACT,WAAW;;;;;;;;;;;AAKnB"}},
    {"offset": {"line": 636, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}