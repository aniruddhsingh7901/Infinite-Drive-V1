{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/components/CryptoPayment.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport QRCode from 'qr-code-styling';\nimport { useRouter } from 'next/navigation';\n\ninterface CryptoPaymentProps {\n  orderId: string;\n  currency: string;\n  address: string;\n  amount: number;\n  expiresIn: number; // in seconds\n}\n\nexport default function CryptoPayment({ orderId, currency, address, amount, expiresIn }: CryptoPaymentProps) {\n  const [timeLeft, setTimeLeft] = useState(expiresIn);\n  const [status, setStatus] = useState<'pending' | 'completed' | 'failed'>('pending');\n  const router = useRouter();\n\n  useEffect(() => {\n    // Generate QR Code\n    const qr = new QRCode({\n      width: 300,\n      height: 300,\n      data: `${currency.toLowerCase()}:${address}?amount=${amount}`,\n      dotsOptions: { color: '#2563eb', type: 'rounded' },\n      backgroundOptions: { color: '#ffffff' },\n      imageOptions: { hideBackgroundDots: true, imageSize: 0.4, margin: 0 }\n    });\n\n    const container = document.getElementById('qrcode');\n    if (container) {\n      container.innerHTML = '';\n      qr.append(container);\n    }\n\n    // Start countdown timer\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    // Check payment status\n    const checkStatus = setInterval(async () => {\n      try {\n        const response = await fetch(`/api/payments/status/${orderId}`);\n        const data = await response.json();\n\n        if (data.status === 'completed') {\n          setStatus('completed');\n          clearInterval(checkStatus);\n          setTimeout(() => {\n            router.push(`/download?token=${data.downloadToken}`);\n          }, 3000);\n        }\n      } catch (error) {\n        console.error('Failed to check payment status:', error);\n      }\n    }, 10000);\n\n    return () => {\n      clearInterval(timer);\n      clearInterval(checkStatus);\n    };\n  }, [orderId, currency, address, amount]);\n\n  const minutes = Math.floor(timeLeft / 60);\n  const seconds = timeLeft % 60;\n\n  return (\n    <div className=\"max-w-md mx-auto p-6 bg-white rounded-xl shadow-lg\">\n      <div className=\"text-center mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-800\">Complete Payment</h2>\n        <p className=\"text-gray-600\">Send exactly {amount} {currency}</p>\n      </div>\n\n      {/* QR Code */}\n      <div className=\"bg-gray-50 p-4 rounded-lg mb-6\">\n        <div id=\"qrcode\" className=\"flex justify-center\" />\n      </div>\n\n      {/* Payment Details */}\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm text-gray-600\">Send To Address:</label>\n          <div className=\"flex items-center gap-2\">\n            <input\n              type=\"text\"\n              value={address}\n              readOnly\n              className=\"w-full p-2 bg-gray-50 rounded border font-mono text-sm\"\n            />\n            <button\n              onClick={() => navigator.clipboard.writeText(address)}\n              className=\"p-2 text-blue-600 hover:text-blue-700\"\n            >\n              Copy\n            </button>\n          </div>\n        </div>\n\n        {/* Timer */}\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">Time Remaining:</span>\n          <span className=\"font-mono text-lg\">\n            {minutes}:{seconds.toString().padStart(2, '0')}\n          </span>\n        </div>\n\n        {/* Status */}\n        <div className=\"flex items-center gap-2 mt-4\">\n          <div className={`w-2 h-2 rounded-full ${\n            status === 'pending' ? 'bg-yellow-400' :\n            status === 'completed' ? 'bg-green-400' : 'bg-red-400'\n          }`} />\n          <span className=\"text-sm text-gray-600\">\n            {status === 'pending' ? 'Waiting for payment...' :\n             status === 'completed' ? 'Payment confirmed!' : 'Payment failed'}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///home/im/infinite-drive/frontend/src/app/payments/process/page.tsx"],"sourcesContent":["'use client';\n\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport CryptoPayment from '@/components/CryptoPayment';\n\nexport default function PaymentProcessPage() {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  \n  const orderId = searchParams.get('orderId') || '';\n  const currency = searchParams.get('currency') || '';\n  const address = searchParams.get('address') || '';\n  const amount = parseFloat(searchParams.get('amount') || '0');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <CryptoPayment\n        orderId={orderId}\n        currency={currency}\n        address={address}\n        amount={amount}\n        expiresIn={1800} // 30 minutes\n      />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IACtB,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc;IAC/C,MAAM,WAAW,aAAa,GAAG,CAAC,eAAe;IACjD,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc;IAC/C,MAAM,SAAS,WAAW,aAAa,GAAG,CAAC,aAAa;IAExD,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,mIAAA,CAAA,UAAa;YACZ,SAAS;YACT,UAAU;YACV,SAAS;YACT,QAAQ;YACR,WAAW;;;;;;;;;;;AAInB"}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}